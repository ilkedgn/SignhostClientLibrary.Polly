name: CI

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

env:
  SH_VERSION_SUFFIX: 'preview'

jobs:
  build:
    runs-on: windows-latest
    environment: dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get Latest NuGet Version
        id: get_version
        run: |
          VERSION=$(curl -sL "https://api.nuget.org/v3/registration5-gz-semver2/entrustsignhostclientlibrary.polly/index.json" | gunzip -c | jq -r '.items[].items[].catalogEntry.version' | grep -v '\-' | sort -V | tail -n 1)
          echo "LATEST_VERSION=${VERSION}" >> $GITHUB_ENV
          echo "Latest version: $VERSION"
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"

          # Increment the patch version (the third component)
          PATCH_VERSION=${VERSION_PARTS[2]}
          PATCH_VERSION=$((PATCH_VERSION + 1))

          # Recombine the version (major.minor.patch)
          NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH_VERSION"

          # Set the new version as the environment variable
          echo "LATEST_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

          # Print the new version
          echo "Latest version: $NEW_VERSION"
        shell: bash

      # - name: Get Latest NuGet VersionPreview
      #   id: get_version
      #   run: |
      #       # Get the latest NuGet version including '-preview'
      #       VERSION=$(curl -sL "https://api.nuget.org/v3/registration5-gz-semver2/entrustsignhostclientlibrary.polly/index.json" | gunzip -c | jq -r '.items[].items[].catalogEntry.version' | sort -V | tail -n 1)

      #       # Print the current latest version
      #       echo "Latest version (including preview): $VERSION"

      #       # Split the version into major, minor, and patch parts
      #       IFS='.' read -r -a VERSION_PARTS <<< "$VERSION"

      #       # Increment the patch version (the third component)
      #       PATCH_VERSION=${VERSION_PARTS[2]}
      #       PATCH_VERSION=$((PATCH_VERSION + 1))

      #       # Recombine the version (major.minor.patch)
      #       NEW_VERSION="${VERSION_PARTS[0]}.${VERSION_PARTS[1]}.$PATCH_VERSION-preview"

      #       # Set the new version as the environment variable
      #       echo "LATEST_VERSION=${NEW_VERSION}" >> $GITHUB_ENV

      #       # Print the new incremented version
      #       echo "Incremented version: $NEW_VERSION"
      #   shell: bash


      - name: Setup .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.x'

      - name: Clear NuGet Cache
        run: dotnet nuget locals all --clear

      - name: Restore NuGet packages
        run: dotnet restore "src/SignhostAPIRetryClient.sln"
        continue-on-error: ${{ github.event.pull_request.head.repo.fork == true }}
        if: ${{ github.event.pull_request.head.repo.fork == false }}
      - name: Build solution
        run: dotnet build "src/SignhostAPIRetryClient.sln" --configuration Release

      - name: Test with Coverage
        run: dotnet test --no-build src/Signhost.APIClient.Tests/Signhost.APIClient.Tests.csproj --collect:"XPlat Code Coverage" -c Release

      - name: Pack NuGet package
        run: dotnet pack "src/Signhost.APIClient/Signhost.APIClient.csproj" --configuration Release /p:Version=${{ env.VERSION }} /p:IncludeReadmeFile=true
        if: ${{ github.event.pull_request.head.repo.fork == false }}

      - name: Upload NuGet Package
        uses: actions/upload-artifact@v3
        with:
          name: Nuget
          path: '**/*.nupkg'
        if: ${{ github.event.pull_request.head.repo.fork == false }}

      - name: Publish NuGet package to NuGet.org
        run: |
          dotnet nuget push '**/*.nupkg' --api-key ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json
        env:
          POLLY_TEST: ${{ secrets.NUGET_KEY }}
        if: ${{ github.event.pull_request.head.repo.fork == false }}
